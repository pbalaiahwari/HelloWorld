ansible
1.yum install epel-release
2.yum update
3.yum -y install ansible
create user
4.ansible --version
5.adduser ansible
6.passwd ansible
7.visudo
	ansible ALL=(ALL) NOPASSWD: ALL
8.change user to ansible:- su - ansible
9.ssh-keygen command to access all nodes with out reistrictions.
10.copy the ssh keys command:- ssh-copy-id ansible@<testmachie>
11.ssh-copy-id localhost
12.add hosts or node in /etc/ansible/hosts command:- sudo vi hosts its an ini file
	example:- [demo]
		   ip-address
13.select name of the machine by groupname[0] --pick the first machine in the group
14.groupname[1] --pick the second machine in the group
15.range of machines groupname[0:1]  --pick two machines 1 and 2 
16. two groups groupname1:groupname2
17.ansible all --list-host
18.ansible demo --list-host
19.ansible demo[0] --list-host
20.ansible demo -a "command"
21.ansible demo -s -a "command" for sudo prevelige.
22.ansible <host> -a <command> -m <module>
23.ansible demo -m copy -a "src=filename dest=/home/ansible/filename"
24.yellow changed green no change
25.ansible demo -s -m yum -a "pkg=httpd state=installed|latest|absent"
26.ansible demo -s -m service -a "name=httpd state=started|restarted|stopped"  http://34.212.102.102/
27.create user account ansible demo -s -m user -a "name=test state= absent"
28.add/remove cron jobs ansible demo -m crom -a "name='crontest' minute='30' hour='20' job='ls > /tmp/log.txt'"
29.ansible demo -m crom -a "name='crontest' state=absent" comma will seperate the number of crons
30.ansible demo -m setup -a "filter=*ipv4*" if you want to see all remove filters
31.we can't ise anisible command every time so there is a yaml or yml files called playbook. file should begin with --- and end with ...
32."- " followed by value same indentation for every thing. if any keys are specified than there should be "name: value"
33.playbooks is composed of one or more plays in a list
34.goal of a play is to map group of hosts to run tasks.
35.task is nothing more than a call to an ansible module.
36.playbook divided into sections target_section, variable_section and task_section
37. target_section defines the hosts against which playbooks tasks has to be executed.
38.variable_section defines variables.
39.task_section list all modules to run in a order.
40.playbook should be a yml files "mkdir playbook" create a file "first.yml"
41.to run playbook ansible-playbook first.yml
42.target_section 
   hosts: all
   user: ansible
   sudo: yes    #yes or no
   connection: ssh #ssh or paramico
   gather_facts: no #yes or no
43.task_section
	---
	- host: demo
	  user: ansible
	  sudo: yes
	  connection: ssh
	  gather_facts: no
	  tasks:
	   - name: install httpd server on centos 7
	     ## option ## action: yum name=httpd state=installed
	     yum: pkg=httpd state=installed
44.variable_section 
	- hosts: demo
	  vars:
	    username: test
45.we ccan define in tsk or in a variable file and add the var file in task file from script or to prompt while use 
	- hosts: demo
	  vars_prompt:
	   - name: your_name
	     prompt: please enter the package name
46.handler_section for only task section is used. like start service is the handler when tomcat is installed in task.
47.task
	name
	action
	notify: restart httpd
   handlers:
      - name: restart httpd 
	action: service name=httpd state=restarted
48.--- #outline to playbook translation
- host demo
  user: ansible
  sudo: yes
  gather_facts: yes
  tasks:
    - name: date/time stamp
      raw: /usr/bin/date > /home/ansible/playbook_start.log
    - name: install apache
      yum: pkg-httpd state=latest
      notify: restart the httpd
    - name: log all packages installed
      raw: yum list installed > /home/ansible/playbook_start.log
    - name: date/time stamp
      raw: /usr/bin/date > /home/ansible/playbook_start.log
  handlers:
    - name: restart the httpd
      action: service name=httpd state=restarted
49.how to run tasks parallel async: 300 and poll: 3
50.loops - name: add a list of users
	   user: name={{ item }} state=present
	   with_items:
		- user1
		- user2
		- user3
51.conditionals
	tasks: 
	  - name: install httpd
	    command: apt-get -y install apache2
	    when: ansible_os_family == "Debian" 
	  - name: install httpd
	    command: yum -y install apache2
	    when: ansible_os_family == "RedHat"
52.tasks:
- commad: echo {{ item }}
  with_items: [0,2,4,6,8,10]
  when: item > 5
53.do-until
	tasks: 
	  - name: install apache
	    yum: pkg=httpd state=latest
	  - name: verify service status
	    shell: systemctl status httpd
	    register: result
	    until: result.stdout.find("active(running)") != -1
	    retries: 5
	    delay: 5 
	  - debug: var=result
diff between raw and shell raw won't give out put shell will provide output 
54. vault is a place were we keep all belongings to keep sensitive data so that no other can read. using password to read or edit playbook.
55.ansible-vault create playbook.yml
56.ansible-vault edit playbbok.yml
57.ansible-vault rekey playbbok.yml
58.ansible-vault decrypt playbbok.yml
59.ansible-vault encrypt playbbok.yml add's a password to existing file.
60.create includestat.yml so that we can use it again and again where ever we need.
	- name: install httpd
	  yum: pkg-httpd state=latest
61.- host demo
  user: ansible
  sudo: yes
  gather_facts: yes
  tasks:
    - name: date/time stamp
      raw: /usr/bin/date > /home/ansible/playbook_start.log
    - include: includestat.yml
    - name: verify the httpd installed
      raw: yum list installed | grep httpd > /tmp/result.log
62.what is tags? it is used when there is a large playbook if you want to run only some specified tasks than use tasks.
63.tasks:
     -name: firstname
      raw: echo "task" > /tmp/log.log
      tags:
	- firstname
64. ansible-playbook playbook.yml --tags "firstname"
65.if we want to execute all tasks except the tags. ansible-playbook playbook.yml --skip-tags "firstname"
66.roles creating roles framework 
	roles/<rolename>/
		tasks/main.yml
		vars/main.yml
		handlers/main.yml
		default/main.yml
		meta/main.yml
67.if we want to run other than roles inclued pre_tasks or post_tasks
68.ansible looks for roles in present directory or in /etc/ansible/roles/ or configure it in ansible_cong in /etc/ansible/ansible_config
69.we can specify a conditoin in master playbook for which role to select by giving rules.
70.roles:
	- { role: redhatwebservers, when: ansible_os_family == "Redhat" }
	- { role: debianwebservers, when: ansible_os_family == "debian" }
71. wait_for wait for some set of time
       - name: wait for service tot start
	 wait_for:
	  port: 80
	  state: started
72.passing variables from command line
	ansible-playbook playbook.yml --etra-vars "variable=preetham"


dockers documentaion
1.vm ware is on machine/os/vmware/os1/os2/os3 individual os will be configured according to our needs. there is a limit as our machine configuration id full.
2.dockers is on machine/os/dockers/containers where light weight there will be no seperate operating system will run on host operating system.
3.what is a container? it contains some layers, 
	3.1 first layer is os image called boot fs of which operating system we need. its not complete os system.
	3.2 the file system it going to use is union file it has read only we can only read we write in to it. its a tar file.
	3.3 when a container is launched from a image, docker mount a read-write file system on top of any payer below.
	3.4 evry thing you install lie git, java and other package will be layer by layer.
	3.5 we can create the container from container by copying it.
4. core components: Docker deamon runs on the host machine, docker client used to interact with daemon.
5. workflow components: docker image holds the environment & your applications, docker container created from images, start, stop, run and delete, docker registry public and private repositories used to store images, docker file used to automate image construction.
6. to creater a container need a image of readhat or os what ever we need. download the redhat image from docker registry.
7. installation of docker on redhat
	# pre-requisite for container-selinux-2.9-4.el7.noarch.rpm
	sudo yum install policycoreutils-python

	wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm
	sudo rpm -i container-selinux-2.21-1.el7.noarch.rpm

	#Set up the Docker CE repository on RHEL:
	sudo yum install -y yum-utils
	sudo yum install -y device-mapper-persistent-data lvm2
	sudo yum-config-manager --enable rhel-7-server-extras-rpms
	sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	sudo yum makecache fast

	# Install the latest version of Docker CE on RHEL:
	sudo yum -y install docker-ce

	#Start Docker:
	sudo systemctl start docker

	#Test your Docker CE installation:
	sudo docker run hello-world

	# configure Docker to start on boot
	sudo systemctl enable docker
8."docker info" to check the information of docker. 
9.how to create a container, first the layer of the image ubuntu or any os 
	we need home directory.
	we need a shell environment to connect to the os. mostly used bash shell.
	startup script .bashrc in home dir
	"docker run -i -t ubuntu //bin/bash" -i input to the container -t terminal ubuntu image bin/bash shell environment.
10.when we run the command we will be in the ubuntu machine now, use hostname to see the machine name.
11. check the linux flavour to check whihc linux you are in.
12.command to see the user of the container whoami
13.how to come out of the container exit 
14.command to see all the images available on docker engine "docker images"
15.command to see all the images available in docker repo "docker search ubuntu" will give you all ubunut os with various application.
16.command to download the images "docker pull debian"
17.container naming "docker run -name preetham -it ubuntu //bin/bash"
18.how to start the existing container "docker start preetham" for stoping use stop command.
19.how to go in to the container "docker attach preetham"
20."docker ps" will show the running containers.
21."docker ps -a" will show all the containers.
22.command to delete a container "docker rm name/id"
23.creating daemonized container docker run --name preetham -d ubuntu //bin/sh -c "whiletrue; do echo hello world; sleep 1; done"
	while true ##loop
	echo "hello students"  ## print
	sleep 1 ##wait for a second
	done ## finish
	this will create a container and run the process. we can't access or see it.
24.if we want to see what's happening in the container "docker logs -f preetham" -f will show the continous output.
25.inspect the container running "docker top preetham"
26.how to share a container with others 
	create a image "docker commit preetham" this will create a image based on some value
	create a image with name "docker commit preetham myfirstimage"
	we can name a image by command "docker tag image-name/id"
27. to see the diff from original docker image "docker diff preetham"
28. docker files create a docker file.
	1. base image to use
	2.entry point
	3.command to do in steps
29.sample file 
	from <imagename>
	USER username
	WORKDIR location
	COPY ##location of the file## /tmp/
	run touch /tmp/testfile  ##CMD["echo", "hi"] ##to specify work directory "WORKDIR /temp/" "ENV myname preetham"
	ENV myname PREETHAM
30.build a image "docker build -t imagename <filename>"
31.run time working directory docker run --name container_name -w /temp/ -it image_name //bin/bash we ccan specify inside a file or at run time
32.environment variables:- 
	ENV name_of_the_environment_varible preetham
33. if we want to define a user in docker to start a container 
	"USER nobody"
34. how to copy a file "COPY location"
35.how to untar a file while making a container "ADD '.tar_file' extract to location"
36.ONBUILD:
	when we need to create a image from another image along with some additional work.
	ONBUILD RUN echo "test" > /tmp.test.txt
37.MAINTAINNER preetham "mail_id"
38. volumes which can be shared between two containers. container doesn't have to run to share a volume.
	volume ia directory in container.
	Volume source destination "VOLUME ["/opt/project", "/data"]
39.volumes can also be declared from cmd-line
	"docker run -it -v /usr/data ubuntu"
	sample file 
	FROM ubuntu
	VOLUME ["/home/ec2-user/docker", "/data/"]
40.command to use the volume of a existing container in new container
	"docker run -it --name container_name --priviliged=true --volumes-from container_which_contain_volume image //bin/bash"
41.how to share a volume between host and container
	"docker run -it --name container_name -v /home/ec2-user/docker://tmp/data --priviliged=true ubuntu //bin/bash"
42.check data defined in a image
	"docker inspect container/-name"
43."docker inspect --format '{{ .NetworkSettings.IPAddress}}' container_name"
44."docker inspect --format='{{ .State.Running }}' container_name"
45.EXPOSE 8080 in docker file
	-->to tell what ports are to be published in this image.
	-->https://hostname:8000 this will connect to container with port 8080
	-->command "docker run -it --name jenkins -p 8080:8080 jenkins //bin/bash" 

46.deleting images 
	"docker rmi name_of_image"
47.deploying a registry server
	start your registry "docker run -d -p 5000:5000 -restart=always -name registry registry:2"
	tag a image in the registry "docker tag ubuntu localhost:5000/ubuntu"
	push image to registry "doker pull localhost:5000/ubuntu"
	stop registry "docker stop registry" "doocker rm -v registry"
48. how to delete every available image "docker rmi'docker images -a -q'"



installation instructions for docker on redhat and centos enterprise edition.
	# pre-requisite for container-selinux-2.9-4.el7.noarch.rpm
	
	wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm
	sudo rpm -i container-selinux-2.21-1.el7.noarch.rpm

	#Set up the Docker CE repository on RHEL:
	sudo yum install -y yum-utils
	sudo yum install -y device-mapper-persistent-data lvm2
	sudo yum-config-manager --enable rhel-7-server-extras-rpms
	sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	sudo yum makecache fast
	
	# Install the latest version of Docker CE on RHEL:
	sudo yum -y install docker-ce

	#Start Docker:
	sudo systemctl start docker

	#Test your Docker CE installation:
	sudo docker run hello-world

	# configure Docker to start on boot
	sudo systemctl enable docker

	# add user to the docker group 
	sudo usermod -aG docker jethro

	# install Docker Compose:
	# install python-pip
	wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

	sudo yum install ./epel-release-latest-7.noarch.rpm
	sudo yum install -y python-pip

	sudo pip install docker-compose

	# upgrade your Python packages:
	sudo yum upgrade python*

docker swarm for diff host
1. docker swarm is a technique to create and maintain a cluster of docker engines.
2. service deployed in any node can be accessed on other nodes in the same cluster.
3. docker manager controls all the nodes(docker engines on nodes). so we can start any service start a container on any docker engine.
4. manager itself also act as a node 
5. loadbalancing is done by docker no need of wory about that.
6. to initialize the docker swarm command "docker swarm init --advertise-addr ip-address" this will create a token to add the nodes to the manager.
7. "docker swarm join --token SWMTKN-1-2jak7r60qvy5vdxk9syv1hl7hbescd5x54mx8tej4plbc074yi-2daund345c5qdik7be9jjj1au 34.209.155.236:2377" this is the code generated on manager machine.
8. list services on docker swarm "docker service ls"
9. list task of services on docker swarm "docker service ps <name>"
10. create a new service "docker service rm <name> <image-name>"
11. scale a service "docker service scale <name>=5"
12. commands on docker node 
	list the nodes "docker node ls"
	list services in nodes "docker node ps"
	remove node "docker node rm <id>"
13. to leave the swarm "docker swarm leave --force" if there are nodes on swarm than it will not be leaving until the nodes are deleted.
14. to create a service on all the nodes "docker service create --name "ang-app" -p 4200:4200 --mode global/replica demonapp1"
15. docker node update --availability drain/active manager-1
16. 